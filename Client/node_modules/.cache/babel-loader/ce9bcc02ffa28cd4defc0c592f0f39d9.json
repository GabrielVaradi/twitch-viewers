{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varad\\\\Desktop\\\\Atecna\\\\test\\\\test-gabriel-varadi\\\\src\\\\containers\\\\Charts\\\\DotaChart.js\";\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport axios from \"axios\";\nimport api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      totalViewers: 0,\n      series: [{\n        name: 'Dota',\n        data: []\n      }, {\n        name: 'RocketLeague',\n        data: []\n      }, {\n        name: 'Hearthstone',\n        data: []\n      }],\n      options: {\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {// type: 'datetime',\n          // categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999],\n          // range: 10,\n        },\n        yaxis: {// max: 100\n        },\n        legend: {\n          show: false\n        }\n      }\n    };\n\n    this.updateData = (allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers) => {\n      let oldSeriesData;\n      let newSeriesData;\n\n      for (let serie of this.state.series) {\n        if (serie.name === \"Dota\") {\n          oldSeriesData = [...serie.data];\n          newSeriesData = oldSeriesData;\n          newSeriesData.push(allDotaViewers);\n        }\n\n        if (serie.name === \"RocketLeague\") {\n          oldSeriesData = [...serie.data];\n          newSeriesData = oldSeriesData;\n          newSeriesData.push(allRocketLeagueViewers);\n        }\n\n        if (serie.name === \"Hearthstone\") {\n          oldSeriesData = [...serie.data];\n          newSeriesData = oldSeriesData;\n          newSeriesData.push(allHearthstoneViewers);\n        }\n\n        console.log(newSeriesData);\n      } //   this.setState({\n      //     totalViewers: allViewers,\n      //     series: [{\n      //       data: newSeries,\n      //       name: \"Chess Viewers\"\n      //     }]\n      //   });\n\n    };\n\n    this.sumViewers = data => {\n      let totalViewers = 0;\n\n      for (let stream of data.data) {\n        totalViewers += stream.viewer_count;\n      }\n\n      return totalViewers;\n    };\n\n    this.fetchData = async () => {\n      const getToken = await axios.post(\"https://id.twitch.tv/oauth2/token?client_id=kyeb25g56k9enf1h06t5pbhfzr08ed&client_secret=i69ag27ehweltcib9303nsai03cytr&grant_type=client_credentials&scope=analytics:read:games\").then(response => response).catch(e => console.log(e));\n      const dotaData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=29595\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const rocketLeagueData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=30921\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const hearthstoneData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=138585\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const allDotaViewers = this.sumViewers(dotaData);\n      const allRocketLeagueViewers = this.sumViewers(rocketLeagueData);\n      const allHearthstoneViewers = this.sumViewers(hearthstoneData);\n      this.updateData(allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers);\n    };\n  }\n\n  componentDidMount() {\n    //   this.interval = setInterval(() => this.fetchData(), 1000)\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"line\",\n        height: 350\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chart; // curl -X GET 'https://api.twitch.tv/helix/games/top' \\\n// -H 'Authorization: Bearer dx39ctb7padgqe6s8be4q1ir82hy7n' \\\n// -H 'Client-Id: kyeb25g56k9enf1h06t5pbhfzr08ed'","map":{"version":3,"sources":["C:/Users/varad/Desktop/Atecna/test/test-gabriel-varadi/src/containers/Charts/DotaChart.js"],"names":["React","Component","ReactApexChart","axios","api","Chart","state","totalViewers","series","name","data","options","chart","id","height","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","yaxis","legend","updateData","allDotaViewers","allRocketLeagueViewers","allHearthstoneViewers","oldSeriesData","newSeriesData","serie","push","console","log","sumViewers","stream","viewer_count","fetchData","getToken","post","then","response","catch","e","dotaData","fetch","access_token","json","rocketLeagueData","hearthstoneData","componentDidMount","componentWillUnmount","clearInterval","interval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;;;AAGA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;AAAA,SAExBK,KAFwB,GAEhB;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,IAAI,EAAE;AAFR,OADM,EAKN;AACED,QAAAA,IAAI,EAAE,cADR;AAEEC,QAAAA,IAAI,EAAE;AAFR,OALM,EASN;AACED,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,IAAI,EAAE;AAFR,OATM,CAFF;AAgBNC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,EAAE,EAAE,UADC;AAELC,UAAAA,MAAM,EAAE,GAFH;AAGLC,UAAAA,IAAI,EAAE,MAHD;AAILC,UAAAA,UAAU,EAAE;AACVC,YAAAA,OAAO,EAAE,IADC;AAEVC,YAAAA,MAAM,EAAE,QAFE;AAGVC,YAAAA,gBAAgB,EAAE;AAChBC,cAAAA,KAAK,EAAE;AADS;AAHR,WAJP;AAWLC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AADC,WAXJ;AAcLC,UAAAA,IAAI,EAAE;AACJN,YAAAA,OAAO,EAAE;AADL;AAdD,SADA;AAmBPO,QAAAA,UAAU,EAAE;AACVP,UAAAA,OAAO,EAAE;AADC,SAnBL;AAsBPQ,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AADD,SAtBD;AAyBPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE,wBADD;AAELC,UAAAA,KAAK,EAAE;AAFF,SAzBA;AA6BPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC,SA7BF;AAgCPC,QAAAA,KAAK,EAAE,CACL;AACA;AACA;AAHK,SAhCA;AAqCPC,QAAAA,KAAK,EAAE,CACL;AADK,SArCA;AAwCPC,QAAAA,MAAM,EAAE;AACNZ,UAAAA,IAAI,EAAE;AADA;AAxCD;AAhBH,KAFgB;;AAAA,SAkE1Ba,UAlE0B,GAkEb,CAACC,cAAD,EAAiBC,sBAAjB,EAAyCC,qBAAzC,KAAmE;AAE5E,UAAIC,aAAJ;AACA,UAAIC,aAAJ;;AAEA,WAAK,IAAIC,KAAT,IAAkB,KAAKnC,KAAL,CAAWE,MAA7B,EAAqC;AACjC,YAAIiC,KAAK,CAAChC,IAAN,KAAe,MAAnB,EAA2B;AACvB8B,UAAAA,aAAa,GAAG,CAAC,GAAGE,KAAK,CAAC/B,IAAV,CAAhB;AACA8B,UAAAA,aAAa,GAAGD,aAAhB;AACAC,UAAAA,aAAa,CAACE,IAAd,CAAmBN,cAAnB;AACH;;AACD,YAAIK,KAAK,CAAChC,IAAN,KAAe,cAAnB,EAAmC;AAC/B8B,UAAAA,aAAa,GAAG,CAAC,GAAGE,KAAK,CAAC/B,IAAV,CAAhB;AACA8B,UAAAA,aAAa,GAAGD,aAAhB;AACAC,UAAAA,aAAa,CAACE,IAAd,CAAmBL,sBAAnB;AAEH;;AACD,YAAII,KAAK,CAAChC,IAAN,KAAe,aAAnB,EAAkC;AAC9B8B,UAAAA,aAAa,GAAG,CAAC,GAAGE,KAAK,CAAC/B,IAAV,CAAhB;AACA8B,UAAAA,aAAa,GAAGD,aAAhB;AACAC,UAAAA,aAAa,CAACE,IAAd,CAAmBJ,qBAAnB;AACH;;AAELK,QAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAED,OAzB6E,CA2BhF;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,KApGyB;;AAAA,SA2G1BK,UA3G0B,GA2GZnC,IAAD,IAAU;AAErB,UAAIH,YAAY,GAAG,CAAnB;;AACA,WAAK,IAAIuC,MAAT,IAAmBpC,IAAI,CAACA,IAAxB,EAA8B;AAC5BH,QAAAA,YAAY,IAAIuC,MAAM,CAACC,YAAvB;AACD;;AACD,aAAOxC,YAAP;AACD,KAlHyB;;AAAA,SAoH1ByC,SApH0B,GAoHd,YAAY;AACtB,YAAMC,QAAQ,GAAG,MAAM9C,KAAK,CAAC+C,IAAN,CAAW,kLAAX,EACpBC,IADoB,CACfC,QAAQ,IAAIA,QADG,EAEpBC,KAFoB,CAEdC,CAAC,IAAIX,OAAO,CAACC,GAAR,CAAYU,CAAZ,CAFS,CAAvB;AAIA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8DAD0B,EAE1B;AACE,mBAAW;AACT,uBAAa,gCADJ;AAET,2BAAiB,YAAYP,QAAQ,CAACvC,IAAT,CAAc+C;AAFlC;AADb,OAF0B,CAAL,CAStBN,IATsB,CASjBC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EATK,EAUtBL,KAVsB,CAUhBC,CAAC,IAAIX,OAAO,CAACC,GAAR,CAAYU,CAAZ,CAVW,CAAvB;AAYA,YAAMK,gBAAgB,GAAG,MAAMH,KAAK,CAClC,8DADkC,EAElC;AACE,mBAAW;AACT,uBAAa,gCADJ;AAET,2BAAiB,YAAYP,QAAQ,CAACvC,IAAT,CAAc+C;AAFlC;AADb,OAFkC,CAAL,CAS9BN,IAT8B,CASzBC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EATa,EAU9BL,KAV8B,CAUxBC,CAAC,IAAIX,OAAO,CAACC,GAAR,CAAYU,CAAZ,CAVmB,CAA/B;AAYA,YAAMM,eAAe,GAAG,MAAMJ,KAAK,CACjC,+DADiC,EAEjC;AACE,mBAAW;AACT,uBAAa,gCADJ;AAET,2BAAiB,YAAYP,QAAQ,CAACvC,IAAT,CAAc+C;AAFlC;AADb,OAFiC,CAAL,CAS7BN,IAT6B,CASxBC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EATY,EAU7BL,KAV6B,CAUvBC,CAAC,IAAIX,OAAO,CAACC,GAAR,CAAYU,CAAZ,CAVkB,CAA9B;AAaA,YAAMlB,cAAc,GAAG,KAAKS,UAAL,CAAgBU,QAAhB,CAAvB;AACA,YAAMlB,sBAAsB,GAAG,KAAKQ,UAAL,CAAgBc,gBAAhB,CAA/B;AACA,YAAMrB,qBAAqB,GAAG,KAAKO,UAAL,CAAgBe,eAAhB,CAA9B;AACA,WAAKzB,UAAL,CAAgBC,cAAhB,EAAgCC,sBAAhC,EAAwDC,qBAAxD;AACD,KAlKyB;AAAA;;AAsG1BuB,EAAAA,iBAAiB,GAAG;AACpB;AACK,SAAKb,SAAL;AACJ;;AA2DDc,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKC,QAAN,CAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA,6BACI,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAE,KAAK3D,KAAL,CAAWK,OAApC;AAA6C,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWE,MAAhE;AAAwE,QAAA,IAAI,EAAC,MAA7E;AAAoF,QAAA,MAAM,EAAE;AAA5F;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA9KyB;;AAiL9B,eAAeH,KAAf,C,CAEA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport axios from \"axios\"\r\nimport api from '../../api'\r\n\r\n\r\nclass Chart extends Component {\r\n    \r\n      state = {\r\n        totalViewers: 0,\r\n        series: [\r\n          {\r\n            name: 'Dota',\r\n            data: []\r\n          },\r\n          {\r\n            name: 'RocketLeague',\r\n            data: []\r\n          },\r\n          {\r\n            name: 'Hearthstone',\r\n            data: []\r\n          },\r\n        ],\r\n        options: {\r\n          chart: {\r\n            id: 'realtime',\r\n            height: 350,\r\n            type: 'line',\r\n            animations: {\r\n              enabled: true,\r\n              easing: 'linear',\r\n              dynamicAnimation: {\r\n                speed: 1000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          title: {\r\n            text: 'Dynamic Updating Chart',\r\n            align: 'left'\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {\r\n            // type: 'datetime',\r\n            // categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999],\r\n            // range: 10,\r\n          },\r\n          yaxis: {\r\n            // max: 100\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n        }, \r\n      };\r\n  \r\n\r\n\r\n    updateData = (allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers) => {\r\n\r\n        let oldSeriesData\r\n        let newSeriesData\r\n\r\n        for (let serie of this.state.series) {\r\n            if (serie.name === \"Dota\") {\r\n                oldSeriesData = [...serie.data]\r\n                newSeriesData = oldSeriesData\r\n                newSeriesData.push(allDotaViewers)\r\n            }\r\n            if (serie.name === \"RocketLeague\") {\r\n                oldSeriesData = [...serie.data]\r\n                newSeriesData = oldSeriesData\r\n                newSeriesData.push(allRocketLeagueViewers)\r\n\r\n            }\r\n            if (serie.name === \"Hearthstone\") {\r\n                oldSeriesData = [...serie.data]\r\n                newSeriesData = oldSeriesData\r\n                newSeriesData.push(allHearthstoneViewers)\r\n            }\r\n\r\n        console.log(newSeriesData)\r\n\r\n      }\r\n      \r\n    //   this.setState({\r\n    //     totalViewers: allViewers,\r\n    //     series: [{\r\n    //       data: newSeries,\r\n    //       name: \"Chess Viewers\"\r\n    //     }]\r\n    //   });\r\n    }\r\n\r\n    componentDidMount() {\r\n    //   this.interval = setInterval(() => this.fetchData(), 1000)\r\n         this.fetchData()\r\n    }\r\n\r\n    sumViewers = (data) => {\r\n      \r\n      let totalViewers = 0\r\n      for (let stream of data.data) {\r\n        totalViewers += stream.viewer_count\r\n      }\r\n      return totalViewers\r\n    }\r\n\r\n    fetchData = async () => {\r\n      const getToken = await axios.post(\"https://id.twitch.tv/oauth2/token?client_id=kyeb25g56k9enf1h06t5pbhfzr08ed&client_secret=i69ag27ehweltcib9303nsai03cytr&grant_type=client_credentials&scope=analytics:read:games\")\r\n        .then(response => response)\r\n        .catch(e => console.log(e))\r\n\r\n      const dotaData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=29595\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n      const rocketLeagueData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=30921\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n      const hearthstoneData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=138585\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n\r\n      const allDotaViewers = this.sumViewers(dotaData)\r\n      const allRocketLeagueViewers = this.sumViewers(rocketLeagueData)\r\n      const allHearthstoneViewers = this.sumViewers(hearthstoneData)\r\n      this.updateData(allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div id=\"chart\">  \r\n                <ReactApexChart options={this.state.options} series={this.state.series} type=\"line\" height={350} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Chart\r\n\r\n// curl -X GET 'https://api.twitch.tv/helix/games/top' \\\r\n// -H 'Authorization: Bearer dx39ctb7padgqe6s8be4q1ir82hy7n' \\\r\n// -H 'Client-Id: kyeb25g56k9enf1h06t5pbhfzr08ed'\r\n"]},"metadata":{},"sourceType":"module"}
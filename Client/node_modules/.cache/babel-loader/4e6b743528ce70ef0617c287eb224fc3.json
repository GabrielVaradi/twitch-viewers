{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varad\\\\Desktop\\\\Atecna\\\\test\\\\test-gabriel-varadi\\\\src\\\\containers\\\\Charts\\\\DotaChart.js\";\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport axios from \"axios\";\nimport api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DotaChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      series: [{\n        name: 'Dota',\n        data: []\n      } //   {\n      //     name: 'RocketLeague',\n      //     data: []\n      //   },\n      //   {\n      //     name: 'Hearthstone',\n      //     data: []\n      //   },\n      ],\n      options: {\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {// type: 'datetime',\n          // categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999],\n          // range: 10,\n        },\n        yaxis: {// max: 100\n        },\n        legend: {\n          show: false\n        }\n      }\n    };\n\n    this.updateData = (allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers) => {\n      for (let serie of this.state.series) {\n        if (serie.name === \"Dota\") {\n          const dotaViewers = this.updateSeriesData(serie.data, allDotaViewers);\n          this.updateSeriesInState(serie.name, dotaViewers);\n        } // if (serie.name === \"RocketLeague\") {\n        //     const rocketLeagueViewers = this.updateSeriesData(serie.data, allRocketLeagueViewers)\n        //     this.updateSeriesInState(serie.name, rocketLeagueViewers)\n        // }\n        // if (serie.name === \"Hearthstone\") {\n        //     const hearthstoneViewers = this.updateSeriesData(serie.data, allHearthstoneViewers)\n        //     this.updateSeriesInState(serie.name, hearthstoneViewers)\n        // }            \n\n      }\n    };\n\n    this.updateSeriesInState = (name, viewers) => {\n      this.setState(prevState => ({\n        series: prevState.series.map(obj => obj.name === name ? Object.assign(obj, {\n          data: viewers\n        }) : obj)\n      }));\n    };\n\n    this.updateSeriesData = (prevViewers, updatedViewers) => {\n      const oldSeriesData = [...prevViewers];\n      const newSeriesData = oldSeriesData;\n      newSeriesData.push(updatedViewers);\n      return newSeriesData;\n    };\n\n    this.sumViewers = data => {\n      let totalViewers = 0;\n\n      for (let stream of data.data) {\n        totalViewers += stream.viewer_count;\n      }\n\n      return totalViewers;\n    };\n\n    this.fetchData = async () => {\n      const getToken = await axios.post(\"https://id.twitch.tv/oauth2/token?client_id=kyeb25g56k9enf1h06t5pbhfzr08ed&client_secret=i69ag27ehweltcib9303nsai03cytr&grant_type=client_credentials&scope=analytics:read:games\").then(response => response).catch(e => console.log(e));\n      const dotaData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=29595\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const rocketLeagueData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=30921\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const hearthstoneData = await fetch(\"https://api.twitch.tv/helix/streams/?first=100&game_id=138585\", {\n        \"headers\": {\n          \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\n          \"Authorization\": \"Bearer \" + getToken.data.access_token\n        }\n      }).then(response => response.json()).catch(e => console.log(e));\n      const allDotaViewers = this.sumViewers(dotaData);\n      const allRocketLeagueViewers = this.sumViewers(rocketLeagueData);\n      const allHearthstoneViewers = this.sumViewers(hearthstoneData);\n      this.updateData(allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers);\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.fetchData(), 2000); //  this.fetchData()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"line\",\n        height: 350\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DotaChart;","map":{"version":3,"sources":["C:/Users/varad/Desktop/Atecna/test/test-gabriel-varadi/src/containers/Charts/DotaChart.js"],"names":["React","Component","ReactApexChart","axios","api","DotaChart","state","series","name","data","options","chart","id","height","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","yaxis","legend","updateData","allDotaViewers","allRocketLeagueViewers","allHearthstoneViewers","serie","dotaViewers","updateSeriesData","updateSeriesInState","viewers","setState","prevState","map","obj","Object","assign","prevViewers","updatedViewers","oldSeriesData","newSeriesData","push","sumViewers","totalViewers","stream","viewer_count","fetchData","getToken","post","then","response","catch","e","console","log","dotaData","fetch","access_token","json","rocketLeagueData","hearthstoneData","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport axios from \"axios\"\r\nimport api from '../../api'\r\n\r\n\r\nclass DotaChart extends Component {\r\n    \r\n      state = {\r\n        series: [\r\n          {\r\n            name: 'Dota',\r\n            data: []\r\n          },\r\n        //   {\r\n        //     name: 'RocketLeague',\r\n        //     data: []\r\n        //   },\r\n        //   {\r\n        //     name: 'Hearthstone',\r\n        //     data: []\r\n        //   },\r\n        ],\r\n        options: {\r\n          chart: {\r\n            id: 'realtime',\r\n            height: 350,\r\n            type: 'line',\r\n            animations: {\r\n              enabled: true,\r\n              easing: 'linear',\r\n              dynamicAnimation: {\r\n                speed: 1000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          title: {\r\n            text: 'Dynamic Updating Chart',\r\n            align: 'left'\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {\r\n            // type: 'datetime',\r\n            // categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999],\r\n            // range: 10,\r\n          },\r\n          yaxis: {\r\n            // max: 100\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n        }, \r\n      };\r\n  \r\n\r\n\r\n    updateData = (allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers) => {\r\n\r\n        for (let serie of this.state.series) {\r\n            if (serie.name === \"Dota\") {\r\n                const dotaViewers = this.updateSeriesData(serie.data, allDotaViewers)\r\n                this.updateSeriesInState(serie.name, dotaViewers)\r\n            }\r\n            // if (serie.name === \"RocketLeague\") {\r\n            //     const rocketLeagueViewers = this.updateSeriesData(serie.data, allRocketLeagueViewers)\r\n            //     this.updateSeriesInState(serie.name, rocketLeagueViewers)\r\n            // }\r\n            // if (serie.name === \"Hearthstone\") {\r\n            //     const hearthstoneViewers = this.updateSeriesData(serie.data, allHearthstoneViewers)\r\n            //     this.updateSeriesInState(serie.name, hearthstoneViewers)\r\n            // }            \r\n      }      \r\n    }\r\n\r\n    updateSeriesInState = (name, viewers) => {\r\n        this.setState(prevState => ({\r\n            series: prevState.series.map(\r\n            obj => (obj.name === name ? Object.assign(obj, { data: viewers }) : obj)\r\n          )\r\n        }));\r\n    }\r\n\r\n    updateSeriesData = (prevViewers, updatedViewers) => {\r\n        const oldSeriesData = [...prevViewers]\r\n        const newSeriesData = oldSeriesData\r\n        newSeriesData.push(updatedViewers)\r\n        return newSeriesData\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.interval = setInterval(() => this.fetchData(), 2000)\r\n        //  this.fetchData()\r\n    }\r\n\r\n    sumViewers = (data) => {\r\n      \r\n      let totalViewers = 0\r\n      for (let stream of data.data) {\r\n        totalViewers += stream.viewer_count\r\n      }\r\n      return totalViewers\r\n    }\r\n\r\n    fetchData = async () => {\r\n      const getToken = await axios.post(\"https://id.twitch.tv/oauth2/token?client_id=kyeb25g56k9enf1h06t5pbhfzr08ed&client_secret=i69ag27ehweltcib9303nsai03cytr&grant_type=client_credentials&scope=analytics:read:games\")\r\n        .then(response => response)\r\n        .catch(e => console.log(e))\r\n\r\n      const dotaData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=29595\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n      const rocketLeagueData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=30921\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n      const hearthstoneData = await fetch(\r\n        \"https://api.twitch.tv/helix/streams/?first=100&game_id=138585\",\r\n        {\r\n          \"headers\": {\r\n            \"Client-ID\": \"kyeb25g56k9enf1h06t5pbhfzr08ed\",\r\n            \"Authorization\": \"Bearer \" + getToken.data.access_token\r\n        }\r\n        }\r\n      )\r\n      .then(response => response.json())\r\n      .catch(e => console.log(e));\r\n\r\n\r\n      const allDotaViewers = this.sumViewers(dotaData)\r\n      const allRocketLeagueViewers = this.sumViewers(rocketLeagueData)\r\n      const allHearthstoneViewers = this.sumViewers(hearthstoneData)\r\n      this.updateData(allDotaViewers, allRocketLeagueViewers, allHearthstoneViewers)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n  \r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div id=\"chart\">  \r\n                <ReactApexChart options={this.state.options} series={this.state.series} type=\"line\" height={350} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default DotaChart\r\n"]},"metadata":{},"sourceType":"module"}
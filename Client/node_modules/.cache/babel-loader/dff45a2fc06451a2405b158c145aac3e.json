{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varad\\\\Desktop\\\\Atecna\\\\test\\\\test-gabriel-varadi\\\\src\\\\containers\\\\Chart\\\\Chart.js\";\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: [],\n      series: [{\n        name: 'sales',\n        data: [30, 40, 35, 50, 49, 60, 70, 91, 125]\n      }],\n      options: {\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999] // range: XAXISRANGE,\n\n        },\n        yaxis: {\n          max: 100\n        },\n        legend: {\n          show: false\n        }\n      }\n    };\n  } // componentDidMount() {\n  //     setInterval(() => this.forceUpdate(), 1000);\n  // }\n  // componentDidUpdate() {\n  //     this.updateData()\n  // }\n  // componentDidMount() {\n  //     window.setInterval(() => {\n  //     //   getNewSeries(lastDate, {\n  //     //     min: 10,\n  //     //     max: 90\n  //     //   })\n  //       ApexCharts.exec('realtime', 'updateSeries', [{\n  //         data: Math.floor(Math.random() * 101)\n  //       }])\n  //     }, 1000)\n  //   }\n\n\n  updateData(prevState) {\n    const data = Math.floor(Math.random() * 101);\n    const prevData = prevState.time; // const newData = prevData.push(data)\n\n    console.log(prevState); // return newData\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState(prevState => ({\n      time: this.updateData(prevState)\n    })), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"line\",\n        height: 350\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/varad/Desktop/Atecna/test/test-gabriel-varadi/src/containers/Chart/Chart.js"],"names":["React","Component","ReactApexChart","Chart","constructor","props","state","time","series","name","data","options","chart","id","height","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","categories","yaxis","max","legend","updateData","prevState","Math","floor","random","prevData","console","log","componentDidMount","interval","setInterval","setState","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        time: [],\r\n        series: [{\r\n            name: 'sales',\r\n            data: [30,40,35,50,49,60,70,91,125]\r\n        }],\r\n        options: {\r\n          chart: {\r\n            id: 'realtime',\r\n            height: 350,\r\n            type: 'line',\r\n            animations: {\r\n              enabled: true,\r\n              easing: 'linear',\r\n              dynamicAnimation: {\r\n                speed: 1000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          title: {\r\n            text: 'Dynamic Updating Chart',\r\n            align: 'left'\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {\r\n            type: 'datetime',\r\n            categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999]\r\n            // range: XAXISRANGE,\r\n          },\r\n          yaxis: {\r\n            max: 100\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n        }, \r\n      };\r\n    }\r\n  \r\n    // componentDidMount() {\r\n    //     setInterval(() => this.forceUpdate(), 1000);\r\n    // }\r\n\r\n    // componentDidUpdate() {\r\n    //     this.updateData()\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     window.setInterval(() => {\r\n    //     //   getNewSeries(lastDate, {\r\n    //     //     min: 10,\r\n    //     //     max: 90\r\n    //     //   })\r\n          \r\n    //       ApexCharts.exec('realtime', 'updateSeries', [{\r\n    //         data: Math.floor(Math.random() * 101)\r\n    //       }])\r\n    //     }, 1000)\r\n    //   }\r\n\r\n    updateData(prevState) {\r\n        const data = Math.floor(Math.random() * 101)\r\n        const prevData = prevState.time\r\n        // const newData = prevData.push(data)\r\n        console.log(prevState)\r\n        // return newData\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState(prevState => ({\r\n            time: this.updateData(prevState)\r\n          })), 1000);\r\n        \r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n  \r\n    render() {\r\n\r\n        console.log(this.state)\r\n        return (\r\n            <div id=\"chart\">  \r\n                <ReactApexChart options={this.state.options} series={this.state.series} type=\"line\" height={350} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Chart"]},"metadata":{},"sourceType":"module"}